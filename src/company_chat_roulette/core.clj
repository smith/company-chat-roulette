;; A program that takes a list of email addresses, splits them up in to random
;; pairs, and sends an email out to all of the addresses showing the pairs.
;;
;; You can use it to arrange random pairs of people to meet together when they
;; otherwise wouldn't have.
(ns company-chat-roulette.core
  (:require [postal.core :as postal]
            [environ.core :refer [env]]))

;; Email addresses
(def email-addresses (clojure.string/split (env :addresses) #","))

(defn addresses->set
  "The Set of email addresses to use. It must have an even number of items
  because they are going to be split into pairs."
  [addresses]
  (set (if (even? (count email-addresses))
              email-addresses
              (conj email-addresses nil))))

(defn pairs
  "The set of addresses split into random pairs"
  [a-set]
  (apply array-map (shuffle a-set)))

;; Today's date
(def today
 (.format (java.text.SimpleDateFormat. "yyyy-MM-dd") (new java.util.Date)))

(defn format-pairs
  "Take a map of pairs and make them a nicely formatted list"
  [pairs]
  (clojure.string/join "\n\n"
    (map (fn [i] (str (or (first i) "nil") " â‡† " (or (last i) "nil"))) pairs)))

(defn message-body
  "The body of the email to be sent"
  [pairs]
  (str "Hello!\n\nHere are today's matches for Company Chat Roulette:\n\n"
       (format-pairs pairs)
       "\n\n"
       "Find that person today and go to lunch with them or have a video\n"
       "chat. If you got 'nil' today, that means you didn't get a match.\n"
       "Maybe you can go out and do something nice for your community\n"
       "instead.\n\n"
       "This message was generated by a cron job running this program daily\n"
       "on smith@getchef.com's personal server. The code can be found at\n"
       "https://github.com/smith/company-chat-roulette. The annotated source\n"
       "can be found at http://nlsmith.com/docs/company-chat-roulette.html."
       ))

(defn send-message!
  "Create and send the message."
  [addresses]
  (postal/send-message {:host "localhost" :port 1025}
                       {:from "company-chat-roulette@getchef.com"
                        :to addresses
                        :type "text/plain; charset=UTF-8"
                        :subject (str "Company Chat Roulette for " today)
                        :Reply-To "smith@getchef.com"
                        :body (message-body (pairs (addresses->set addresses)))}))

(defn -main
  "Main method of the program. Returns the status code from sending the mail
  message."
  []
  (:code (send-message! email-addresses)))
